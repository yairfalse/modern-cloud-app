# Kind cluster configuration for ModernBlog development
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: modernblog-cluster

# Cluster-wide configuration
networking:
  # WARNING: It is _strongly_ recommended that you keep this the default
  # (127.0.0.1) for security reasons. However, it is possible to change this.
  apiServerAddress: "127.0.0.1"
  # By default the API server listens on a random open port.
  # You may choose a specific port but probably don't need to in most cases.
  # Using a random port makes it easier to spin up multiple clusters.
  apiServerPort: 6443
  
  # Pod subnet CIDR
  podSubnet: "10.244.0.0/16"
  
  # Service subnet CIDR
  serviceSubnet: "10.96.0.0/12"
  
  # Disable default CNI for custom networking
  disableDefaultCNI: false
  
  # Kubernetes proxy mode
  kubeProxyMode: "iptables"

# Multi-node cluster configuration
nodes:
  # Control plane node
  - role: control-plane
    image: kindest/node:v1.29.0
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
    extraPortMappings:
      # Ingress HTTP
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      # Ingress HTTPS
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      # Kubernetes API
      - containerPort: 6443
        hostPort: 6443
        protocol: TCP
      # NodePort services range
      - containerPort: 30000
        hostPort: 30000
        protocol: TCP
      - containerPort: 30001
        hostPort: 30001
        protocol: TCP
      - containerPort: 30002
        hostPort: 30002
        protocol: TCP
      - containerPort: 30003
        hostPort: 30003
        protocol: TCP
    extraMounts:
      # Mount local directory for development
      - hostPath: ./
        containerPath: /host
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional
      # Mount Docker socket for Docker-in-Docker
      - hostPath: /var/run/docker.sock
        containerPath: /var/run/docker.sock
        readOnly: false
        selinuxRelabel: false
        propagation: None

  # Worker node 1
  - role: worker
    image: kindest/node:v1.29.0
    extraMounts:
      # Mount local directory for development
      - hostPath: ./
        containerPath: /host
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional
    labels:
      tier: frontend
      zone: us-west1-a
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "tier=frontend,zone=us-west1-a"

  # Worker node 2
  - role: worker
    image: kindest/node:v1.29.0
    extraMounts:
      # Mount local directory for development
      - hostPath: ./
        containerPath: /host
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional
    labels:
      tier: backend
      zone: us-west1-b
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "tier=backend,zone=us-west1-b"

# Feature gates for experimental features
featureGates:
  # Enable feature gates for development
  "EphemeralContainers": true
  "JobTrackingWithFinalizers": true
  "SeccompDefault": true

# Runtime configuration
runtimeConfig:
  "api/all": "true"

# Cluster-level settings
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    etcd:
      local:
        dataDir: "/tmp/etcd"
        extraArgs:
          listen-metrics-urls: "http://0.0.0.0:2381"
    apiServer:
      extraArgs:
        enable-admission-plugins: "NodeRestriction,ResourceQuota,NamespaceLifecycle"
        audit-log-maxage: "30"
        audit-log-maxbackup: "3"
        audit-log-maxsize: "100"
        audit-log-path: "/var/log/audit.log"
        feature-gates: "EphemeralContainers=true"
    controllerManager:
      extraArgs:
        bind-address: "0.0.0.0"
        feature-gates: "EphemeralContainers=true"
    scheduler:
      extraArgs:
        bind-address: "0.0.0.0"
  - |
    kind: KubeletConfiguration
    serverTLSBootstrap: true
    cgroupDriver: systemd