name: Terraform Infrastructure Pipeline

on:
  push:
    branches: [main, develop]
    paths: 
      - 'terraform/**'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  DAGGER_VERSION: "0.9.5"

jobs:
  terraform-validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          dagger version
          
      - name: Run Terraform validation
        working-directory: ci/dagger
        run: |
          dagger call terraform-validate --source=../../terraform
          
      - name: Run Terraform format check
        working-directory: ci/dagger
        run: |
          dagger call terraform-format --source=../../terraform

  terraform-security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Run security scan
        working-directory: ci/dagger
        run: |
          dagger call security-scan --source=../../terraform
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: security-results.json

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        environment: [dev, staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run Terraform plan
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-plan \
            --source=../../terraform \
            --env=${{ matrix.environment }} \
            --gcp-credentials=env:GCP_CREDENTIALS
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run cost estimation
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call cost-estimate \
            --source=../../terraform \
            --env=${{ matrix.environment }} \
            --gcp-credentials=env:GCP_CREDENTIALS
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          
      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            plan-${{ matrix.environment }}.out
            outputs-${{ matrix.environment }}.json

  terraform-deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to development
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-apply \
            --source=../../terraform \
            --env=dev \
            --gcp-credentials=env:GCP_CREDENTIALS \
            --auto-approve=true
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run infrastructure tests
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call infrastructure-test \
            --source=../../terraform \
            --env=dev \
            --gcp-credentials=env:GCP_CREDENTIALS
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

  terraform-deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to staging
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-apply \
            --source=../../terraform \
            --env=staging \
            --gcp-credentials=env:GCP_CREDENTIALS \
            --auto-approve=true
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run infrastructure tests
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call infrastructure-test \
            --source=../../terraform \
            --env=staging \
            --gcp-credentials=env:GCP_CREDENTIALS
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

  terraform-deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run full pipeline
        working-directory: ci/dagger
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | dagger call full-pipeline \
            --source=../../terraform \
            --env=prod \
            --gcp-credentials=env:GCP_CREDENTIALS \
            --deploy-action=${{ github.event.inputs.action }}
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

  terraform-manual:
    name: Manual Terraform Operations
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'prod'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          
      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin sudo sh
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run Terraform operation
        working-directory: ci/dagger
        run: |
          case "${{ github.event.inputs.action }}" in
            "plan")
              echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-plan \
                --source=../../terraform \
                --env=${{ github.event.inputs.environment }} \
                --gcp-credentials=env:GCP_CREDENTIALS
              ;;
            "apply")
              echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-apply \
                --source=../../terraform \
                --env=${{ github.event.inputs.environment }} \
                --gcp-credentials=env:GCP_CREDENTIALS \
                --auto-approve=true
              ;;
            "destroy")
              echo '${{ secrets.GCP_SA_KEY }}' | dagger call terraform-destroy \
                --source=../../terraform \
                --env=${{ github.event.inputs.environment }} \
                --gcp-credentials=env:GCP_CREDENTIALS \
                --auto-approve=true
              ;;
          esac
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}