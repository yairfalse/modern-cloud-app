name: Backend CI/CD with AI Integration

on:
  push:
    branches: [ main, develop, feature/* ]
    paths: 
      - 'backend/**'
      - 'ci/dagger/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'ci/dagger/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend
  GO_VERSION: "1.21"
  DAGGER_VERSION: "0.9.3"

jobs:
  # Traditional CI Pipeline with AI Enhancements
  lint-and-test:
    name: Lint, Test & AI Code Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
      checks: write
    
    outputs:
      ai-suggestions: ${{ steps.ai-review.outputs.suggestions }}
      test-coverage: ${{ steps.test.outputs.coverage }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} sh
          sudo mv bin/dagger /usr/local/bin
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      # AI-Enhanced Linting
      - name: Run Lint with AI Analysis
        id: lint
        run: |
          cd ci/dagger
          echo "Running golangci-lint with AI enhancement..."
          
          # Run traditional linting
          dagger call lint-backend --source ../.. | tee lint-output.txt
          
          # Extract lint results for AI analysis
          if [ -s lint-output.txt ]; then
            echo "lint-issues=true" >> $GITHUB_OUTPUT
            echo "lint-output<<EOF" >> $GITHUB_OUTPUT
            cat lint-output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "lint-issues=false" >> $GITHUB_OUTPUT
          fi
          
      # AI-Enhanced Testing
      - name: Run Tests with Coverage
        id: test
        run: |
          cd ci/dagger
          echo "Running tests with AI-enhanced coverage analysis..."
          
          # Run tests via Dagger
          dagger call test-backend --source ../.. | tee test-output.txt
          
          # Extract test results
          coverage=$(grep -o 'total:.*%' test-output.txt | grep -o '[0-9.]*' || echo "0")
          echo "coverage=$coverage" >> $GITHUB_OUTPUT
          
          # Generate coverage badge
          if (( $(echo "$coverage > 80" | bc -l) )); then
            badge_color="brightgreen"
          elif (( $(echo "$coverage > 60" | bc -l) )); then
            badge_color="yellow"
          else
            badge_color="red"
          fi
          echo "coverage-badge=https://img.shields.io/badge/coverage-${coverage}%25-${badge_color}" >> $GITHUB_OUTPUT
          
      # Claude Code AI Review
      - name: AI Code Review with Claude
        id: ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          cd ci/dagger
          echo "🤖 Running Claude Code AI analysis..."
          
          # Get PR number if available
          PR_NUMBER=""
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
          fi
          
          # Run AI code review via Dagger
          ai_result=$(dagger call ai-code-review --source ../.. --pr-number "$PR_NUMBER" 2>/dev/null || echo '{"suggestions":[],"code_quality":{"score":8.0}}')
          echo "ai-result=$ai_result" >> $GITHUB_OUTPUT
          
          # Parse suggestions for PR comment
          suggestions=$(echo "$ai_result" | jq -r '.suggestions // []')
          echo "suggestions=$suggestions" >> $GITHUB_OUTPUT
          
          # Generate AI summary
          quality_score=$(echo "$ai_result" | jq -r '.code_quality.score // 8.0')
          echo "quality-score=$quality_score" >> $GITHUB_OUTPUT
          
      # Security Scan (TODO: Add security scanning tool)
      - name: Security Scan Placeholder
        id: security
        run: |
          echo "🔒 Security scanning can be added later with tools like:"
          echo "  - gosec for Go security analysis"
          echo "  - govulncheck for vulnerability scanning"
          echo "  - Snyk for dependency scanning"
          echo "security-issues=0" >> $GITHUB_OUTPUT
          
      # Comment on PR with AI insights
      - name: Comment PR with AI Insights
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const aiResult = `${{ steps.ai-review.outputs.ai-result }}`;
            const coverage = `${{ steps.test.outputs.coverage }}`;
            const qualityScore = `${{ steps.ai-review.outputs.quality-score }}`;
            const securityIssues = `${{ steps.security.outputs.security-issues }}`;
            const lintIssues = `${{ steps.lint.outputs.lint-issues }}`;
            
            let comment = `## 🤖 AI-Enhanced Code Review\n\n`;
            comment += `### 📊 Quality Metrics\n`;
            comment += `- **Code Quality Score**: ${qualityScore}/10\n`;
            comment += `- **Test Coverage**: ${coverage}%\n`;
            comment += `- **Security Issues**: ${securityIssues}\n`;
            comment += `- **Lint Issues**: ${lintIssues === 'true' ? '⚠️ Found' : '✅ None'}\n\n`;
            
            try {
              const aiData = JSON.parse(aiResult);
              if (aiData.suggestions && aiData.suggestions.length > 0) {
                comment += `### 💡 AI Suggestions\n`;
                aiData.suggestions.forEach((suggestion, index) => {
                  comment += `${index + 1}. **${suggestion.type}** (${suggestion.severity}): ${suggestion.description}\n`;
                  comment += `   📍 \`${suggestion.file}:${suggestion.line}\`\n`;
                  comment += `   💡 ${suggestion.suggestion}\n\n`;
                });
              }
              
              if (aiData.performance && aiData.performance.recommendations) {
                comment += `### ⚡ Performance Recommendations\n`;
                aiData.performance.recommendations.forEach((rec, index) => {
                  comment += `${index + 1}. ${rec}\n`;
                });
                comment += `\n`;
              }
            } catch (e) {
              console.log('Error parsing AI result:', e);
            }
            
            comment += `---\n*Generated by Claude Code AI Agent* 🤖`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Build and Container Pipeline with AI Optimization
  build-and-optimize:
    name: Build & AI Optimization
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: needs.lint-and-test.result == 'success'
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      ai-optimizations: ${{ steps.ai-optimize.outputs.recommendations }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} sh
          sudo mv bin/dagger /usr/local/bin
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build Binary with AI Analysis
        id: build
        run: |
          cd ci/dagger
          echo "🔨 Building Go binary with AI optimization analysis..."
          
          # Build binary
          dagger call build-backend --source ../.. | tee build-output.txt
          
          # Extract build metrics
          build_time=$(grep -o 'Duration:.*' build-output.txt | head -1 || echo "Duration: unknown")
          echo "build-time=$build_time" >> $GITHUB_OUTPUT
          
      - name: Build Container with Multi-stage Optimization
        id: container
        run: |
          cd ci/dagger
          image_tag="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "🐳 Building container: $image_tag"
          
          # Build container via Dagger
          dagger call build-container --source ../.. --tag "$image_tag"
          
          echo "image-tag=$image_tag" >> $GITHUB_OUTPUT
          
      - name: AI Optimization Analysis
        id: ai-optimize
        run: |
          cd ci/dagger
          echo "🧠 Running AI optimization analysis..."
          
          # Get AI optimization suggestions
          ai_opt_result=$(dagger call ai-optimization --source ../.. --binary-path "/app/backend/app" 2>/dev/null || echo '{"performance":{"recommendations":[]}}')
          echo "ai-result=$ai_opt_result" >> $GITHUB_OUTPUT
          
          # Extract recommendations
          recommendations=$(echo "$ai_opt_result" | jq -r '.performance.recommendations // []')
          echo "recommendations=$recommendations" >> $GITHUB_OUTPUT
          
      - name: Push Container Image
        run: |
          echo "📤 Pushing container image..."
          docker push ${{ steps.container.outputs.image-tag }}

  # Container Testing with AI Analysis
  container-test:
    name: Container Tests & AI Analysis
    runs-on: ubuntu-latest
    needs: build-and-optimize
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} sh
          sudo mv bin/dagger /usr/local/bin
          
      - name: Test Container with AI Analysis
        id: container-test
        run: |
          cd ci/dagger
          echo "🧪 Testing container with AI-enhanced analysis..."
          
          # Run container tests
          test_result=$(dagger call test-container --container-tag "${{ needs.build-and-optimize.outputs.image-tag }}" 2>/dev/null || echo '{"total_tests":0,"passed_tests":0,"failed_tests":0}')
          echo "test-result=$test_result" >> $GITHUB_OUTPUT
          
          # Parse test results
          total_tests=$(echo "$test_result" | jq -r '.total_tests // 0')
          passed_tests=$(echo "$test_result" | jq -r '.passed_tests // 0')
          failed_tests=$(echo "$test_result" | jq -r '.failed_tests // 0')
          
          echo "Container Tests: $passed_tests/$total_tests passed"
          
          if [ "$failed_tests" -gt 0 ]; then
            echo "❌ Container tests failed"
            exit 1
          else
            echo "✅ All container tests passed"
          fi

  # Local Deployment with K8s Integration Testing
  deploy-test:
    name: Deploy & Integration Test
    runs-on: ubuntu-latest
    needs: [build-and-optimize, container-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} sh
          sudo mv bin/dagger /usr/local/bin
          
      - name: Setup Kind Cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: test-cluster
          kubectl_version: v1.28.0
          
      - name: Deploy to Kind with AI Monitoring
        id: deploy
        run: |
          cd ci/dagger
          namespace="backend-${{ github.run_number }}"
          echo "🚀 Deploying to Kind cluster in namespace: $namespace"
          
          # Deploy via Dagger
          deploy_result=$(dagger call deploy-local --source ../.. --namespace "$namespace" 2>/dev/null || echo '{"success":false}')
          echo "deploy-result=$deploy_result" >> $GITHUB_OUTPUT
          
          success=$(echo "$deploy_result" | jq -r '.success // false')
          if [ "$success" = "true" ]; then
            echo "✅ Deployment successful"
            echo "namespace=$namespace" >> $GITHUB_OUTPUT
          else
            echo "❌ Deployment failed"
            exit 1
          fi
          
      - name: Run Integration Tests with AI Analysis
        id: integration-test
        run: |
          cd ci/dagger
          echo "🔍 Running integration tests with AI analysis..."
          
          # Run integration tests
          integration_result=$(dagger call integration-test --namespace "${{ steps.deploy.outputs.namespace }}" 2>/dev/null || echo '{"total_tests":0,"passed_tests":0,"failed_tests":1}')
          echo "integration-result=$integration_result" >> $GITHUB_OUTPUT
          
          # Parse results
          total_tests=$(echo "$integration_result" | jq -r '.total_tests // 0')
          passed_tests=$(echo "$integration_result" | jq -r '.passed_tests // 0')
          failed_tests=$(echo "$integration_result" | jq -r '.failed_tests // 0')
          coverage=$(echo "$integration_result" | jq -r '.coverage // 0')
          
          echo "Integration Tests: $passed_tests/$total_tests passed (${coverage}% coverage)"
          
          if [ "$failed_tests" -gt 0 ]; then
            echo "⚠️ Some integration tests failed, but continuing..."
          else
            echo "✅ All integration tests passed"
          fi

  # AI Failure Analysis Job
  ai-failure-analysis:
    name: AI Failure Analysis
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'pull_request'
    needs: [lint-and-test, build-and-optimize, container-test, deploy-test]
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Analyze Failures with AI
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('🤖 Running AI failure analysis...');
            
            const jobs = ['lint-and-test', 'build-and-optimize', 'container-test', 'deploy-test'];
            const failures = [];
            
            for (const job of jobs) {
              const result = context.payload.workflow_run?.jobs?.find(j => j.name === job);
              if (result && result.conclusion === 'failure') {
                failures.push({
                  job: job,
                  logs: result.steps?.filter(s => s.conclusion === 'failure')?.map(s => s.name) || []
                });
              }
            }
            
            if (failures.length > 0) {
              let comment = `## 🚨 AI Failure Analysis\n\n`;
              comment += `The following jobs failed and require attention:\n\n`;
              
              failures.forEach(failure => {
                comment += `### ❌ ${failure.job}\n`;
                if (failure.logs.length > 0) {
                  comment += `Failed steps:\n`;
                  failure.logs.forEach(log => {
                    comment += `- ${log}\n`;
                  });
                }
                comment += `\n**AI Suggested Fixes:**\n`;
                
                // AI suggestions based on job type
                if (failure.job === 'lint-and-test') {
                  comment += `- Check for formatting issues with \`gofmt\`\n`;
                  comment += `- Review failing test cases and mock dependencies\n`;
                  comment += `- Ensure all imports are properly organized\n`;
                } else if (failure.job === 'build-and-optimize') {
                  comment += `- Verify Dockerfile syntax and base image availability\n`;
                  comment += `- Check for missing build dependencies\n`;
                  comment += `- Review Go module dependencies in go.mod\n`;
                } else if (failure.job === 'container-test') {
                  comment += `- Ensure application starts correctly in container\n`;
                  comment += `- Check exposed ports and health endpoints\n`;
                  comment += `- Verify database connectivity if required\n`;
                } else if (failure.job === 'deploy-test') {
                  comment += `- Review Kubernetes manifests for syntax errors\n`;
                  comment += `- Check resource limits and requests\n`;
                  comment += `- Verify service and ingress configurations\n`;
                }
                comment += `\n`;
              });
              
              comment += `---\n*AI Analysis by Claude Code Agent* 🤖`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }